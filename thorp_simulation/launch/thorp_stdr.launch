<!--
  Thorp global navigation simulation on STDR:
  TODO: most probably broken after reorganizing launch files
  - stdr simulator
  - robot model
  - navigation
  - rviz view
 -->

<launch>
<!-- 
  <arg name="laser_topic" default="robot0/laser_0"/> default laser topic in stdr for 1 robot
  <arg name="odom_topic" default="robot0/odom"/> -->

  <arg name="move_base_flex"  default="true"/>

  <!-- Frames: I subvert stdr frames system to into our old good map -> odom -> base, but here odom
       is named map_static and base robot0. To make this work, I must prevent stdr_server to publish
       map -> map_static, as amcl already does:
       Comment https://github.com/stdr-simulator-ros-pkg/stdr_simulator/blob/indigo-devel/stdr_server/src/map_server.cpp#L93  -->
  <arg name="odom_frame_id"   default="map_static"/> 
  <arg name="base_frame_id"   default="robot0"/>  
  <arg name="global_frame_id" default="map"/> 

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_file"        default="$(env TURTLEBOT_STDR_MAP_FILE)"/>
  <arg name="initial_pose_x"  default="2.0"/>
  <arg name="initial_pose_y"  default="2.0"/>
  <arg name="initial_pose_a"  default="0.0"/>

  <arg name="min_obstacle_height" default="0.0"/>
  <arg name="max_obstacle_height" default="5.0"/>

  <!--  ******************** STDR ********************  -->
  <include file="$(find stdr_robot)/launch/robot_manager.launch"/>

<!--
cannot use because if so data is not visualized in the simulator
TODO: I can recover this if I can rename the robot and once I start using a thorp namespace:
   https://github.com/corot/thorp/issues/5
  <node pkg="nodelet" type="nodelet" name="robot_manager" args="manager">
    <remap from="robot0/odom" to="/odom"/>
    <remap from="robot0/laser" to="/scan"/>
    <remap from="robot0/cmd_vel" to="mobile_base/commands/velocity"/>
    
    LV-MaxSonar-EZ2 ultrasound sensors
    <remap from="robot0/sonars/m90" to="mobile_base/sensors/sonars/m90"/>
    <remap from="robot0/sonars/m72" to="mobile_base/sensors/sonars/m72"/>
    <remap from="robot0/sonars/m54" to="mobile_base/sensors/sonars/m54"/>
    <remap from="robot0/sonars/m36" to="mobile_base/sensors/sonars/m36"/>
    <remap from="robot0/sonars/m18" to="mobile_base/sensors/sonars/m18"/>
    <remap from="robot0/sonars/0"   to="mobile_base/sensors/sonars/0"  />
    <remap from="robot0/sonars/p18" to="mobile_base/sensors/sonars/p18"/>
    <remap from="robot0/sonars/p36" to="mobile_base/sensors/sonars/p36"/>
    <remap from="robot0/sonars/p54" to="mobile_base/sensors/sonars/p54"/>
    <remap from="robot0/sonars/p72" to="mobile_base/sensors/sonars/p72"/>
    <remap from="robot0/sonars/p90" to="mobile_base/sensors/sonars/p90"/>
    
    Sharp_GP2Y0A21_IR sensors
    <remap from="robot0/infrared/arm"  to="mobile_base/sensors/infrared/arm" />
    <remap from="robot0/infrared/l155" to="mobile_base/sensors/infrared/l155"/>
    <remap from="robot0/infrared/l180" to="mobile_base/sensors/infrared/l180"/>
    <remap from="robot0/infrared/r180" to="mobile_base/sensors/infrared/r180"/>
    <remap from="robot0/infrared/r155" to="mobile_base/sensors/infrared/r155"/>
  </node>
 -->
  <param name="/robot0/odometry_rate" value="50.0"/>

  <!-- Run STDR server with a predefined map -->
  <node pkg="stdr_server" type="stdr_server_node" name="stdr_server" output="screen" args="$(arg map_file)"/>
  <!-- Spawn new robot at init position 2 2 0 -->
  <node pkg="stdr_robot" type="robot_handler" name="$(anon robot_spawn)"
       args="add $(find thorp_simulation)/robots/thorp.yaml $(arg initial_pose_x) $(arg initial_pose_y) $(arg initial_pose_a)"/>
  <!-- Run STDR GUI -->
  <include file="$(find stdr_gui)/launch/stdr_gui.launch"/>
  <!-- Run the relay to duplicate STDR topics with common Thorp names -->
  <include file="$(find thorp_simulation)/launch/includes/stdr_relays.launch.xml"/>

  <!-- Connect STDR's thorp and base_footprint tf trees -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="fake_global_reference"
        args="0.0 0.0 0.0 0.0 0.0 0.0 robot0 base_footprint"/>
  
  <!--  ***************** Robot Model *****************  -->
  <include file="$(find thorp_bringup)/launch/includes/model.launch.xml"/>

  <!--  ************* Common functionality ************  -->
  <include file="$(find thorp_simulation)/launch/includes/thorp_common.launch.xml">
    <arg name="move_base_flex"  value="$(arg move_base_flex)"/>
    <arg name="map_file"        value="$(arg map_file)"/>
    <arg name="initial_pose_x"  value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y"  value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a"  value="$(arg initial_pose_a)"/>
    <arg name="odom_frame_id"   value="$(arg odom_frame_id)"/>
    <arg name="base_frame_id"   value="$(arg base_frame_id)"/>
    <arg name="global_frame_id" value="$(arg global_frame_id)"/>
  </include>

  <!--  ****** Manually setting some parameters *******  -->
  <param name="move_base/local_costmap/obstacle_layer/scan/min_obstacle_height" value="$(arg min_obstacle_height)"/>
  <param name="move_base/local_costmap/obstacle_layer/scan/max_obstacle_height" value="$(arg max_obstacle_height)"/>
  <param name="move_base/global_costmap/obstacle_layer/scan/min_obstacle_height" value="$(arg min_obstacle_height)"/>
  <param name="move_base/global_costmap/obstacle_layer/scan/max_obstacle_height" value="$(arg max_obstacle_height)"/>
  <param name="move_base_flex/local_costmap/obstacle_layer/scan/min_obstacle_height" value="$(arg min_obstacle_height)"/>
  <param name="move_base_flex/local_costmap/obstacle_layer/scan/max_obstacle_height" value="$(arg max_obstacle_height)"/>
  <param name="move_base_flex/global_costmap/obstacle_layer/scan/min_obstacle_height" value="$(arg min_obstacle_height)"/>
  <param name="move_base_flex/global_costmap/obstacle_layer/scan/max_obstacle_height" value="$(arg max_obstacle_height)"/>

  <!--  **************** Visualization ****************  -->
  <node if="$(arg visualization)"
        name="rviz" pkg="rviz" type="rviz" args="-d $(find thorp_bringup)/rviz/navigation.rviz" output="screen" respawn="true"/>
</launch>
