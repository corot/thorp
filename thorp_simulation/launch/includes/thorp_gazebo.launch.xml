<launch>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <include file="$(find thorp_bringup)/launch/includes/state_publisher.launch.xml">
    <arg name="simulation" value="true"/>
  </include>

  <!-- Gazebo model spawner -->
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-urdf -param robot_description -model thorp
              -x $(arg initial_pose_x)
              -y $(arg initial_pose_y)
              -Y $(arg initial_pose_a)
              -J arm_shoulder_pan_joint 0.0
              -J arm_shoulder_lift_joint -1.9
              -J arm_elbow_flex_joint 2.2
              -J arm_wrist_flex_joint 1.4
              -J gripper_link_joint 0.0
              -J cannon_joint 0.0
              -unpause"/>  <!--  we spawn arm model on resting state -->

  <!-- Fake laser from Kinect (2D slice) and Xtion (3D projection) -->
  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" output="screen" respawn="true">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="kinect_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="kinect/depth_registered/image_raw"/>
    <remap from="scan" to="kinect/scan"/>
  </node>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen" respawn="true">
    <rosparam>
      target_frame: xtion_mount_link  # horizontally-aligned frame at the same height of the camera
      transform_tolerance: 0.01
      min_height: -0.865       # frame is at 0.876, so provide 1 cm for irregularities in the ground
      max_height: +0.025       # right above the camera
      angle_min: -0.58         # horizontal fov is 58 degrees
      angle_max: +0.58
      angle_increment: 0.0087  # M_PI/360.0
      scan_time: 0.05
      range_min: 0.45
      range_max: 2.5           # inf readings must be within range_max for clearing, but
      use_inf: false           # bigger than voxel layer obstacle_range for not marking
      inf_epsilon: -0.0001     # any negative value here will work to achieve this ^
      concurrency_level: 1     # single threaded
    </rosparam>
    <remap from="cloud_in" to="xtion/depth_registered/points"/>
    <remap from="scan" to="xtion/scan"/>
  </node>

  <!-- Read the configuration and load controllers for the arm, gripper and cannon -->
  <rosparam file="$(find thorp_simulation)/param/controllers.yaml" command="load"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
        args="--timeout 30 joint_state_controller gripper_joint cannon_joint arm_controller"/>

  <!-- We provide GripperCommand action with arbotix controllers, as on real robot; but
       the simulation flag will ensure that we don't load any physical robot controller  -->
  <include file="$(find thorp_manipulation)/launch/includes/arm.launch.xml">
    <arg name="simulation" value="true"/>
  </include>

  <!-- Same for the cannon: on simulation will talk with a simulated controller` -->
  <include file="$(find thorp_cannon)/launch/cannon.launch">
    <arg name="simulation" value="true"/>
  </include>
</launch>
