<launch>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="spawn_delay"    default="5.0"/>  <!-- delay model spawning to give gazebo time to start -->

  <!-- Spawn thorp gazebo model with the arm on resting state -->
  <node name="spawn_thorp_model" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-urdf -param robot_description -model thorp
              -x $(arg initial_pose_x)
              -y $(arg initial_pose_y)
              -Y $(arg initial_pose_a)
              -J arm_shoulder_pan_joint 0.0
              -J arm_shoulder_lift_joint -1.9
              -J arm_elbow_flex_joint 2.2
              -J arm_wrist_flex_joint 1.4
              -J gripper_link_joint 0.0
              -J cannon_joint 0.0
              -unpause"
        launch-prefix="bash -c 'sleep $(arg spawn_delay); $0 $@'"/>

  <!-- Read the configuration and load controllers for the arm, gripper and cannon -->
  <rosparam file="$(find thorp_simulation)/param/controllers.yaml" command="load"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
        args="--timeout 30 joint_state_controller gripper_joint cannon_joint arm_controller"
        launch-prefix="bash -c 'sleep $(arg spawn_delay); $0 $@'"/>

  <!-- We provide GripperCommand action with arbotix controllers, as on real robot; but
       the simulation flag will ensure that we don't load any physical robot controller  -->
  <include file="$(find thorp_manipulation)/launch/includes/arm.launch.xml">
    <arg name="simulation" value="true"/>
  </include>

  <!-- Same for the cannon: on simulation will talk with a simulated controller` -->
  <include file="$(find thorp_cannon)/launch/cannon.launch">
    <arg name="simulation" value="true"/>
  </include>

  <!-- Republish gazebo grasping events as ROS messages that manipulation can act upon -->
  <node pkg="gazebo_grasp_plugin_ros" type="grasp_event_republisher" name="grasp_event_republisher" output="screen" respawn="true">
    <remap from="~grasp_events" to="/gazebo/grasp_events"/>
  </node>

  <!-- Fake laser from Kinect (2D slice) and Xtion (3D projection) -->
  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" output="screen" respawn="true">
    <rosparam file="$(find thorp_bringup)/param/kinect/depthimage_to_laserscan.yaml" command="load"/>
    <param name="output_frame_id" value="kinect_rgb_frame"/>
    <remap from="image" to="kinect/depth_registered/image_raw"/>
    <remap from="scan" to="kinect/scan"/>
  </node>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen" respawn="true">
    <rosparam file="$(find thorp_bringup)/param/xtion/pointcloud_to_laserscan.yaml" command="load"/>
    <remap from="cloud_in" to="xtion/depth_registered/points"/>
    <remap from="scan" to="xtion/scan"/>
  </node>

  <!-- Bumper/cliff sensors as pointcloud, so they can be integrated on the costmaps  -->
  <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>
</launch>
