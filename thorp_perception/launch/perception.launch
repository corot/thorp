<!--
  Thorp perception
 -->

<launch>
  <arg name="pipeline"/>  <!-- ORK / COB / RAIL -->
  <arg name="target_objects" default="[]"/>

  <!--  **************** ORK pipeline *****************  -->
  <group if="$(eval pipeline == 'ORK')">
    <arg name="external_camera" default="false"/>

    <node pkg="thorp_perception" type="object_detection_server" name="object_detection_server" output="screen" respawn="true">
      <param name="ork_execute_timeout" value="5.0"/>
      <param name="recognize_objs_calls" value="5"/>

      <remap from="rgb_image" to="xtion/rgb/image_raw"/>
    </node>

    <node pkg="object_recognition_ros" type="object_information_server" name="object_information_server" output="screen" respawn="true"/>

    <include if="$(arg external_camera)" file="$(find thorp_perception)/launch/includes/obj_rec.launch.xml" ns="tabletop">
      <arg name="as_server"    value="true"/>
      <arg name="config_file"  value="$(find thorp_perception)/config/ork/external.tabletop.detection.ros.ork"/>
      <arg name="robot_frame"  value="base_footprint"/>
      <arg name="sensor_frame" value="external_camera_depth_optical_frame"/>
    </include>

    <include unless="$(arg external_camera)" file="$(find thorp_perception)/launch/includes/obj_rec.launch.xml" ns="tabletop">
      <arg name="as_server"    value="true"/>
      <arg name="config_file"  value="$(find thorp_perception)/config/ork/tabletop.detection.ros.ork"/>
      <arg name="robot_frame"  value="base_footprint"/>
      <arg name="sensor_frame" value="xtion_depth_optical_frame"/>
    </include>
  </group>

  <!--  ************ COB Object Detection *************  -->
  <group if="$(eval pipeline == 'COB')">
    <node name="cob_object_detection" pkg="cob_people_object_detection_tensorflow" type="cob_people_object_detection_tensorflow.py" output="screen" respawn="true">
      <rosparam command="load" file="$(find thorp_perception)/config/cob/object_detection.yaml"/>
    </node>

    <node name="cob_object_projection" pkg="cob_people_object_detection_tensorflow" type="projection.py" output="screen" respawn="true">
      <rosparam command="load" file="$(find thorp_perception)/config/cob/object_projection.yaml"/>
    </node>

    <node name="cob_object_tracking" pkg="thorp_perception" type="object_tracking.py" output="screen" respawn="true">
      <rosparam param="target_objects" subst_value="True">$(arg target_objects)</rosparam>
    </node>
  </group>

  <!--  ************ RAIL Object Detection ************  -->
  <group if="$(eval pipeline == 'RAIL')">
    <node pkg="thorp_perception" type="rail_object_detection_server" name="object_detection_server" output="screen" respawn="true">
      <param name="publish_static_tf" value="false"/>
      <param name="max_matching_error" value="1e-4"/>
      <param name="output_frame" value="base_footprint"/>
    </node>

    <node pkg="rail_segmentation" type="rail_segmentation" name="rail_segmentation" output="screen" respawn="true">
      <rosparam command="load" file="$(find thorp_perception)/config/rail/segmentation.yaml" subst_value="True">
        $(find thorp_perception)
      </rosparam>
    </node>

    <include file="$(find thorp_perception)/launch/includes/template_matcher.launch.xml"/>
  </group>
</launch>
