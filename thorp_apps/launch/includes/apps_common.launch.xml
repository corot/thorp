<!--
  Nodes common to all apps:
  - Thorp robot (real or simulated)
  - executive (smach or bt)
  - optional executive visualization
  - optional video recording
 -->

<launch>
  <arg name="app_name"/>
  <arg name="simulator"      default="none"/>  <!-- none | stage | gazebo | stdr -->
  <arg name="world_name"     default="empty"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="executive"      default="smach"/>  <!-- smach | bt -->
  <arg name="viz_executive"  default="false"/>
  <arg name="start_delay"    default="0.0"/>
  <arg name="record_video"   default="false"/>

  <group if="$(eval simulator == 'none')">
    <!--  ********** Thorp robot standalone ***********  -->
    <include file="$(find thorp_bringup)/launch/thorp_robot.launch"/>
  </group>

  <group if="$(eval simulator != 'none')">
    <!--  ***** Simulated mobile manipulator Thorp ****  -->
    <include file="$(find thorp_simulation)/launch/thorp_$(arg simulator).launch">
      <arg name="world_name"     value="$(arg world_name)"/>
      <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
      <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
      <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    </include>
  </group>

  <!--  ************* Apps configuration **************  -->
  <rosparam file="$(find thorp_apps)/param/apps_config.yaml" command="load" ns="$(arg app_name)"/>

  <!--  ************ Named configurations *************  -->
  <!-- Python reconfigure helper reads all yaml files inside this path -->
  <param name="named_configs_path" value="$(find thorp_bringup)/param/named_configs"/>
  <!-- C++ reconfigure helper requires to load each configuration in the parameter server -->
  <group ns="named_configuration">
    <rosparam file="$(find thorp_bringup)/param/named_configs/precise_controlling.yaml" command="load" ns="precise_controlling"/>
    <rosparam file="$(find thorp_bringup)/param/named_configs/waypoints_following.yaml" command="load" ns="waypoints_following"/>
  </group>

  <!--  ********* Executive and visualization *********  -->
  <group if="$(eval executive == 'smach')">
    <node pkg="thorp_smach" type="$(arg app_name).py" name="$(arg app_name)" output="screen" respawn="false">
      <param name="app_name" value="$(arg app_name)"/>
      <param name="start_delay" value="$(arg start_delay)"/>
      <param name="run_introspection_server" value="$(eval arg('viz_executive') or arg('record_video'))"/>
    </node>

    <group if="$(arg viz_executive)">
      <node pkg="thorp_smach" type="show_state_on_rviz.py" name="$(arg app_name)_show_state" output="screen" respawn="true">
        <param name="app_name" value="$(arg app_name)"/>
      </node>

      <node pkg="smach_viewer" type="smach_viewer.py" name="$(arg app_name)_smach_viewer" output="screen" respawn="true"/>
    </group>
  </group>

  <group if="$(eval executive == 'bt')">
    <include file="$(find thorp_bt_cpp)/launch/bt_runner.launch">
      <arg name="app_name" value="$(arg app_name)"/>
      <arg name="publish_bt" value="$(arg viz_executive)"/>
    </include>

    <group if="$(arg viz_executive)">
      <node pkg="groot" type="Groot" name="groot" args="--mode monitor --autoconnect" output="screen" respawn="true"/>
    </group>
  </group>


  <!--  *************** Video recording ***************  -->
  <group if="$(arg record_video)">
    <node if="$(eval simulator == 'gazebo')"
          pkg="thorp_simulation" type="gazebo_camera_control" name="gz_camera_control"/>

    <node pkg="thorp_apps" type="movie_director.py" name="movie_director">
      <param name="app_name" value="$(arg app_name)"/>
      <param name="script_path" value="$(eval find('thorp_apps')+'/resources/movie_scripts/' + arg('app_name') + '.yaml')"/>
    </node>
  </group>
</launch>
