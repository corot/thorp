<!--
  Make Thorp execute a specific application, either using SMACH or behavior trees as executive
    TODO 1: still not launching the whole stuff; navigation is missing
    TODO 2: this is not fully generic, as keyboard_ctrl is obj manip specific; idea: make it issue generic commands and show "not apply" when the SM rejects it
    TODO 3: move app launchers from simulation to here, and make them work also for the real robot, and launch capabilities and RViz there;
            indeed, this launcher should disappear, as in simulation!
            (TBD if I allow choosing executive for each app)
    TODO 4: load somewhere named configs location  now wrongly on (thorp_common.launch)
 -->

<launch>
  <arg name="app_name"/>
  <arg name="executive"/>  <!-- btree / smach -->
  <arg name="keyboard_ctrl" default="true"/>
  <arg name="external_camera" default="false"/>
  <arg name="simulation" default="false"/>   <!-- run simulation instead of real robot   each app will have a sim associated (or none at all,,, if cannot be simulataed)-->

  <group unless="$(arg simulation)"> 
    <!--  ********** Thorp robot standalone ***********  -->
    <include file="$(find thorp_bringup)/launch/thorp_robot.launch"/>

    <!--  ******* External 3D camera (optional) *******  -->
    <include if="$(arg external_camera)" file="$(find thorp_bringup)/launch/includes/xtion.launch.xml">
      <arg name="camera_name" value="external_camera"/>
    </include>

    <!--  ****** Thorp perception and manipulation ******  -->

    <include file="$(find thorp_perception)/launch/perception.launch">
      <arg name="pipeline" value="RAIL"/>
    </include>

    <include file="$(find thorp_manipulation)/launch/manipulation.launch">
      <arg name="simulation" default="$(arg simulation)"/>
      <arg name="debug" value="false"/>
    </include>

    <!--  As we are not (yet) running navigation and localization, fake global reference to make Moveit octomap happy  -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="fake_global_reference" output="screen" respawn="true"
          args="0.0 0.0 0.0 0.0 0.0 0.0 map odom"/>

    <!-- Run Rviz and load the default config to see the state of the move_group node and the scene interaction markers -->
    <node pkg="rviz" type="rviz" name="rviz" output="screen" respawn="true"
          args="-d $(find thorp_bringup)/rviz/manipulation.rviz"/>
  </group>

  <group if="$(arg simulation)">
    <!--  *********** Run app on simulation ***********  -->
    <include file="$(find thorp_simulation)/apps/$(arg app_name).launch"/>

    <!-- Capabilities are launched by the apps, as they depend on the selected simulator -->
  </group>


  <!--  *********** Executive behavior tree ***********  -->
  <group if="$(eval executive == 'btree')">
    <include file="$(find thorp_behavior)/launch/action_server.launch">
	  <arg name="robee_interactive" value="true"/>
	</include>

	<include file="$(find thorp_behavior)/launch/arc_frontend.launch"/>
  </group>

  <!--  ****** Executive smach and visualization ******  -->
  <group if="$(eval executive == 'smach')">
    <node pkg="thorp_smach" type="$(arg app_name).py" name="$(arg app_name)_smach" output="screen" respawn="false"/>

    <node pkg="smach_viewer" type="smach_viewer.py" name="$(arg app_name)_smach_viewer" output="screen" respawn="true"/>
  </group>


  <!--  ********** Keyboard user interaction **********  -->
  <!-- We do it required so it will shutdown the whole demo on exit -->
  <node if="$(arg keyboard_ctrl)" pkg="thorp_bringup" type="keyboard_ctrl.py" name="$(arg app_name)_key_ctrl" output="screen" required="true"
        args="$(arg app_name)">
    <param name="window_geometry" value="360x240"/>
    <param name="window_caption" value="Object manipulation user commands"/>
    <param name="text_font" value="Comic Sans MS"/>
    <param name="font_size" value="12"/>
    <rosparam param="valid_commands">['start', 'stop', 'reset', 'clear', 'fold']</rosparam>

    <remap from="user_commands_action_server" to="behavior_tree_server/run_user_command" if="$(eval executive == 'btree')"/>
  </node>
</launch>
