<!--
  Launch Asus Xtion Pro camera driver
-->
<launch>
  <arg name="camera_name" default="xtion"/>

  <!-- Factory-calibrated depth registration -->
  <arg name="depth_registration"              default="true"/>
  <arg name="depth"                             value="depth_registered" if="$(arg depth_registration)"/>
  <arg name="depth"                             value="depth" unless="$(arg depth_registration)"/>

  <!-- Laserscan processing -->
  <arg name="scan_topic"                        value="$(arg camera_name)/scan"/>
  <arg name="scan_processing"                   value="true" />

  <include file="$(find openni2_launch)/launch/openni2.launch">
    <arg name="respawn"                         value="true" />
    <arg name="camera"                          value="$(arg camera_name)"/>
    <arg name="device_id"                       value="1402140381"/>

    <!-- We only need RGB images and depth registered images -->
    <arg name="publish_tf"                      value="false"/>
    <arg name="depth_registration"              value="true" />
    <arg name="rgb_processing"                  value="true" />
    <arg name="ir_processing"                   value="false"/>
    <arg name="depth_processing"                value="false"/>
    <arg name="depth_registered_processing"     value="true" />
    <arg name="disparity_processing"            value="false"/>
    <arg name="disparity_registered_processing" value="false"/>
  </include>

   <!--                        Laserscan
     This uses lazy subscribing, so will not activate until scan is requested.
   -->
  <group ns="$(arg camera_name)" if="$(arg scan_processing)">
    <node pkg="nodelet" type="nodelet" name="pointcloud_to_laserscan"
          args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet $(arg camera_name)_nodelet_manager">
      <rosparam file="$(find thorp_bringup)/param/xtion/pointcloud_to_laserscan.yaml" command="load"/>
      <remap from="cloud_in" to="depth_registered/points"/>
    </node>
  </group>
</launch>
