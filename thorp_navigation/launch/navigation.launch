<!--
  Thorp navigation:
  - move_base[_flex]
  - pose following
  - geometric map
  - semantic map???
  - localization
  - pose persistence
 -->

<launch>
  <arg name="localization"    default="amcl"/>    <!-- amcl, static, gazebo -->
  <arg name="move_base_flex"  default="true"/>
  <arg name="base_frame_id"   default="base_footprint"/>  
  <arg name="odom_frame_id"   default="odom"/> 
  <arg name="global_frame_id" default="map"/>
  <arg name="smooth_velocity" default="true"/>
  <arg name="save_robot_pose" default="true"/>

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_name"        default="home"/>
  <arg name="map_file"        default="$(find thorp_navigation)/resources/maps/$(arg map_name).yaml"/>
  <arg name="initial_pose_x"  default="0.0"/>
  <arg name="initial_pose_y"  default="0.0"/>
  <arg name="initial_pose_a"  default="0.0"/>

  <!--  **************** Move base flex ***************  -->
  <include if="$(arg move_base_flex)" file="$(find thorp_navigation)/launch/includes/move_base_flex.launch.xml">
    <arg name="odom_frame_id"   value="$(arg odom_frame_id)"/>
    <arg name="base_frame_id"   value="$(arg base_frame_id)"/>
    <arg name="global_frame_id" value="$(arg global_frame_id)"/>
    <arg name="smooth_velocity" value="$(arg smooth_velocity)"/>
  </include>

  <!--  ****************** Move base ******************  -->
  <include unless="$(arg move_base_flex)" file="$(find thorp_navigation)/launch/includes/move_base.launch.xml">
    <arg name="smooth_velocity" value="$(arg smooth_velocity)"/>
  </include>

  <!--  **************** Pose following ****************  -->
  <!-- Velocity smoother nodelet; needed on gazebo to prevent robot from falling due to jerky movements -->
  <node pkg="nodelet" type="nodelet" name="follow_smoother" output="screen" respawn="true"
        args="load yocs_velocity_smoother/VelocitySmootherNodelet mobile_base_nodelet_manager">
    <!-- TODO: gazebo smoother params: much faster decceleration to avoid overturning -->
    <rosparam file="$(find thorp_bringup)/param/vel_smoother_gazebo.yaml" command="load"/>
    <remap from="follow_smoother/smooth_cmd_vel" to="/cmd_vel_mux/input/following"/>
    <remap from="follow_smoother/robot_cmd_vel" to="/mobile_base/commands/velocity"/>
    <remap from="follow_smoother/odometry" to="/odom"/>
  </node>

  <node pkg="thorp_navigation" type="pose_follower" name="pose_follower" output="screen" respawn="true">
    <param name="enabled" value="false"/>
    <param name="v_scale" value="1.0"/>
    <param name="w_scale" value="5.0"/>
    <param name="no_pose_timeout" value="1.0"/>

    <remap from="cmd_vel" to="follow_smoother/raw_cmd_vel"/>
    <remap from="target_pose" to="target_object_pose"/>
  </node>

  <!--  ****** Geometric and semantic map servers *****  -->
  <node pkg="map_server" type="map_server" name="map_server" output="screen" respawn="true" args="$(arg map_file)">
    <param name="frame_id" value="map"/>
  </node>

  <!--  ******************** Amcl *********************  -->
  <include if="$(eval localization == 'amcl')"
           file="$(find thorp_navigation)/launch/includes/amcl.launch.xml">
    <arg name="scan_topic"      value="scan"/>
    <arg name="base_frame_id"   value="$(arg base_frame_id)"/>
    <arg name="odom_frame_id"   value="$(arg odom_frame_id)"/>
    <arg name="global_frame_id" value="$(arg global_frame_id)"/>
    <arg name="initial_pose_x"  value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y"  value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a"  value="$(arg initial_pose_a)"/>
  </include>

  <!--  ************* Static localization *************  -->
  <node if="$(eval localization == 'static')"
        pkg="tf2_ros" type="static_transform_publisher" name="static_localization" output="screen" respawn="true"
        args="$(arg initial_pose_x) $(arg initial_pose_y) 0.0 0.0 0.0 $(arg initial_pose_a) map odom"/>

  <!--  ************* Gazebo ground truth *************  -->
  <node if="$(eval localization == 'gazebo')"
        pkg="thorp_simulation" type="gazebo_ground_truth.py" name="gazebo_ground_truth" output="screen" respawn="true"/>

  <!--  **** Watchdog to keep the pose on rebooting ***  -->
  <node if="$(arg save_robot_pose)"
        pkg="thorp_toolkit" type="save_pose_node" name="save_amcl_pose" output="screen" respawn="true"/>
</launch>
